{"version":3,"file":"static/js/3.ad99cb8e.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCajN,MATA,SAAoBA,GAChB,IAAIC,EAAO,YAAeD,EAAME,GAChC,OACI,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCGtC,MAPA,SAAkBN,GAEd,OAAO,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMO,W,uCCkC7C,IAAMC,GAAcC,EAAAA,EAAAA,GAAiB,IAiB/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAfwB,SAACX,GACjD,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GACXC,SAAU,CAACC,EAAAA,EAAUX,GACrBY,YAAa,qBACbd,KAAK,sBAEhB,0BACI,6CAOhB,EA5CA,SAAiBN,GACb,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,SAASC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAoBnB,QAASmB,EAAEnB,QAASL,GAAIwB,EAAExB,IAAhCwB,EAAExB,OAC1DyB,EAAkBN,EAAMO,QAAQH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAuBvB,KAAMuB,EAAEvB,KAAMJ,GAAI2B,EAAE3B,IAA1B2B,EAAE3B,OAMhE,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKuB,KAGL,iBAAKxB,UAAWC,EAAhB,WACI,yBAAMmB,KACN,SAACb,EAAD,CAAqBG,SAZX,SAACiB,GACnB9B,EAAM+B,YAAYD,EAAOE,0B,uCCGjC,GAAeC,EAAAA,EAAAA,IACXC,EAAAA,IACAC,EAAAA,EAAAA,KAdkB,SAACd,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACc,GACtB,MAAO,CACHL,YAAa,SAACC,GACVI,GAASC,EAAAA,EAAAA,GAAcL,SAO/BM,EAAAA,EAHJ,CAIEC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Lv03N\",\"dialogsItems\":\"Dialogs_dialogsItems__ZGRRa\",\"dialog\":\"Dialogs_dialog__N6Df2\",\"active\":\"Dialogs_active__s-EqF\",\"messages\":\"Dialogs_messages__KWVOD\",\"message\":\"Dialogs_message__7zM9A\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from '../Dialogs.module.css';\r\nimport {DialogType} from \"../../../Redux/dialogs-reducer\";\r\n\r\nfunction DialogItem(props: DialogType) {\r\n    let path = \"/dialogs/\"  + props.id\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {MessageType} from \"../../../Redux/dialogs-reducer\";\r\n\r\n\r\nfunction Message (props:MessageType) {\r\n\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React, {ChangeEvent} from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {InitDialogsReducerStateType} from \"../../Redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\ntype DialogsTypeProps = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: InitDialogsReducerStateType\r\n    isAuth: boolean\r\n}\r\n\r\nfunction Dialogs(props: DialogsTypeProps) {\r\n    let state = props.dialogsPage\r\n\r\n    let messagesElement = state.messages.map(m => <Message key={m.id} message={m.message} id={m.id}/>);\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n\r\n    const addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n//if(!props.isAuth) return <Redirect to={'/loginTC'}/>;\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElement}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       placeholder={'Enter your message'}\r\n                       name='newMessageBody'/>\r\n            </div>\r\n            <div>\r\n                <button>send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {InitDialogsReducerStateType, sendMessageAC} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: InitDialogsReducerStateType,\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody:string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\nexport default compose <React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n"],"names":["props","path","id","className","s","to","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","messagesElement","messages","map","m","dialogsElements","dialogs","d","values","sendMessage","newMessageBody","compose","withRouter","connect","dispatch","sendMessageAC","withAuthRedirect","Dialogs"],"sourceRoot":""}